class Token{
    constructor(tokenType, value){
        this.tokenType = tokenType;
        this.value = value;
    }
}

class DOMToken extends Token{
    constructor(DOMTokenType, value){
        super(DOMTokenType, value);
    }
}

const DOMTokenType = {
    OPEN_TAG_START: 'OPEN_TAG_START', // <
    CLOSE_TAG_START: 'CLOSE_TAG_START', // </
    DEFAULT_TAG_FINISH: 'DEFAULT_TAG_FINISH', // >
    VOID_TAG_FINISH: 'VOID_TAG_FINISH', // />
    OPEN_TAG_NAME: 'OPEN_TAG_NAME',
    CLOSE_TAG_NAME: 'CLOSE_TAG_NAME',
    BOOL_ATT: 'BOOL_ATT',
    ATT_KEY: 'ATT_KEY',
    ATT_VALUE: 'ATT_VALUE',
    CONTENT: 'CONTENT',
    SCRIPT: 'SCRIPT',
    STYLE: 'STYLE',
    EQUALS: 'EQUALS',
    QUOTE: 'QUOTE',
    DOUBLE_DASH: 'DOUBLE_DASH', //--
    OPEN_BRACE: 'OPEN_BRACE', //[
    CLOSE_BRACE: 'CLOSE_BRACE', //]

    //<!--
    //<!--[if
    //<![if
    //<![endif]-->
    //<![endif]>
    //<!DOCTYPE

    OPEN_TAG_IGNORE: 'OPEN_TAG_IGNORE', //<!
    OPEN_TAG_DLH: 'OPEN_TAG_DLH', //DOWNLEVEL HIDDEN\
    OPEN_TAG_FINISH_DLH: 'OPEN_TAG_FINISH_DLH',
    OPEN_TAG_DLR: 'OPEN_TAG_DLR', //DOWNLEVEL REVEALED
    OPEN_TAG_FINISH_DLR: 'OPEN_TAG_FINISH_DLR',
    CLOSE_TAG_DLH: 'CLOSE_TAG_DLH', //DOWNLEVEL HIDDEN
    CLOSE_TAG_DLR: 'CLOSE_TAG_DLR', //DOWNLEVEL REVEALED
    CLOSE_TAG_IGNORE: 'CLOSE_TAG_IGNORE', // -->
    CONDITIONAL_HTML_DLR: 'CONDITIONAL_HTML_DLR',
    CONDITIONAL_HTML_DLH: 'CONDITIONAL_HTML_DLH',
    IGNORE_DOCTYPE: 'DOCTYPE_ELEMENT',
    COMMENT: 'COMMENT',
    EDGE_CASE: 'EDGE_CASE'
};

const DOMIgnoreCategory = {
    DEFAULT: 'DEFAULT',
    DOCTYPE: 'DOCTYPE',
    DOWNLEVEL_HIDDEN_OPEN: 'DOWNLEVEL_HIDDEN_OPEN',
    DOWNLEVEL_HIDDEN_CLOSING: 'DOWNLEVEL_HIDDEN_CLOSING',
    DOWNLEVEL_REVEALED_OPEN: 'DOWNLEVEL_REVEALED_OPEN',
    DOWNLEVEL_REVEALED_CLOSING: 'DOWNLEVEL_REVEALED_CLOSING',
    IGNORE: 'IGNORE' //generic classifier to denote that the type of ignore is not yet known
}